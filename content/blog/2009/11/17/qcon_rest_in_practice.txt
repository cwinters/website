[%- META
      menu_choice = 'blog'
      page_title  = 'QCon 2009: REST in Practice' -%]

<h1>QCon 2009: REST in Practice</h1>

<p><strong>Jim Webber, Ian Robinson; ThoughtWorks</strong></p>

<h2>Intro</h2>

<p>ORA book coming out by the same name (additional author Savas
Parastatidis)</p>

<ul>
<li>Deals with the web as a distributed computing platform.</li>
<li>Timetable at beginning: NICE</li>
<li>Link of actual slides toward the end of the afternoon.</li>
<li>Are all REST constraints required by every application?</li>
<li>Web service maturity heuristic from Leonard Richardson</li>
</ul>

<p>(http://www.crummy.com/writing)</p>

<p>(follow same number through all three steps)</p>

<ul>
<li>What? 
<ol>
<li>Divide and conquer: identify resources, giving them a
name</li>
<li>Refactor (do same things in the same way)</li>
<li>Describe special behavior in a standard way</li>
</ol></li>
<li>Why? 
<ol>
<li>Spread complexity around</li>
<li>Reduce complexity</li>
<li>Make complexity learnable</li>
</ol></li>
<li>How? 
<ol>
<li>URIs</li>
<li>Uniform interface: not only for this project, but also
a common developer understanding of implementation and
managing complexity; this is one of the themes throughout
all these</li>
<li>Hypermedia</li>
</ol></li>
</ul>

<p>Maturity model allows us to commonly describe projects and
gauge how RESTful they are, realizing the benefits of each
level</p>

<p>Their aim in projects is to be fully RESTful, even if they
don't get there fully there are great benefits</p>

<p>Why be RESTful? All features we want in business software
systems. Difficult to achieve, even with REST.</p>

<ul>
<li>Scalable</li>
<li>Fault-tolerant</li>
<li>Recoverable</li>
<li>Secure</li>
<li>Losely coupled</li>
</ul>

<p>REST isn't just: pretty URIs, XML/JSON, URI templates, AJAX
applications; JW describe as "ADD REST"</p>

<p>Web broke the rules: the ends of links aren't mandatory to
exist (404 is okay)</p>

<p>CMW: Would be interesting to compare web interactions to method
calls doing the same things. For instance, I call to retrieve a
document from a database. How do I get status back in such a
usable format that I can switch on it?</p>

<p>Fundamentals:</p>

<ul>
<li>To embrace web, you need to understand it</li>
<li><p>Web does not hide hypermedia distribution from you</p>

<p>Key actors in the web architecture</p></li>
<li><p>Web as cookie cutter architecture: routers, caches,
firewalls, proxies, resources</p></li>
</ul>

<h2>What is a Resource?</h2>

<p>Something "interesting" in your system</p>

<ul>
<li>Spreadsheet (or a cell)</li>
<li>Blog posting</li>
<li>Printer</li>
<li>Winning lottery numbers (!)</li>
<li>Transaction</li>
</ul>

<p>Deal with representations of resources, not the resources
themselves -- "pass by value" semantics</p>

<ul>
<li>Can be any format, any media type</li>
<li>Every resource implements a standard uniform interface</li>
<li>Every resource has a URI</li>
<li>Web doesn't discriminate -- this ambivalence is a strong
point, simple</li>
</ul>

<p>CMW: Has anyone tried to model an EMR as REST resources?</p>

<p>JW "As a distributed systems guy I want to make this complicated,
but much of what goes on in the web is actually very
straightforward."</p>

<p>Resource architecture</p>

<ul>
<li>Distinguish between logical and physical</li>
</ul>

<p>Representations</p>

<ul>
<li>Making your system web-friendly <strong>increases</strong> its surface
area</li>
<li>Expose many resources vs fewer endpoints</li>
<li>Every resource may have multiple representations</li>
</ul>

<p>CMW: Parallel between emphasis on identification of resources in
REST and identification of types in Scala?</p>

<p>URIs</p>

<ul>
<li>Every resource has at least one</li>
<li>Identify interesting things (Resources, duh)</li>
<li>Declarative scheme</li>
</ul>

<p>URI-to-resource relationship</p>

<ul>
<li>Two resources cannot be identical</li>
<li>Can have more than one name</li>
<li>No mechanism for URI equality -- it's impossible since name
and identity are bound; determining identity requires
laying the protocol on top of the name</li>
<li>Canonical URIs are long-lived; short-lived ones should
redirect to long-lived one</li>
<li>URI binds the name and identity, really powerful idea; the
fact that the protocol is also in the name is powerful too</li>
<li>Atom broke this apart to be able to uniquely identify
resources, even after they're moved</li>
</ul>

<h2>Scalability</h2>

<p>How REST impacts</p>

<ul>
<li>Loose coupling; growth in one place is not impacted by
changes in other places</li>
<li>Uniform interface: no plumbing surprises</li>
<li>Replication and caching is baked into the model -- caches
have same interfaces as resources</li>
<li><p>Stateless model supports horizontal scaling</p></li>
<li><p>Fault tolerance</p>

<ul>
<li>Stateless: everything required to process a request is in
in a request
<ul>
<li>Sessions plausible, but model as resources!</li>
</ul></li>
<li>Makes it easy to replicate; one web server is replaceable
with another</li>
</ul></li>
<li>Recoverable
<ul>
<li>Recoverable in idea of "crash recovery"</li>
<li>Web emphasizes repeatable information retrieval - if things
don't work, just do it again</li>
<li>GET idempotent; Library of Congress found out the hard way</li>
<li>Limited verbs + idempotence + rich status codes allow you
to remove guesswork from recovery</li>
</ul></li>
<li>Security
<ul>
<li>HTTP mature, SSL for p2p information retrieval</li>
<li>Not sympathetic to web architecture, restricted caching
opportunities</li>
<li>Higher order protocols like Atom starting to change;
encrypt the representation, not the whole channel, which
makes it ok to cache</li>
</ul></li>
<li>Loosely coupled
<ul>
<li>No interdependence on other actors</li>
<li>High load? Plumb in a reverse proxy to help, nobody knows
the difference</li>
</ul></li>
</ul>

<h2>Sidenote: URI templates</h2>

<p>Conflicting URI philosophies</p>

<ol>
<li>URIs should be descriptive, predictable
<ul>
<li>Convey ideas about how resources are arranged</li>
<li>Nice for programmatic access, but introduces coupling</li>
<li>IR: if browsers didn't have a location bar we wouldn't
be so enamored of these; I disagree: I think having this is
one of the reasons the web took off, because it encouraged
exploration and discoverability</li>
</ul></li>
<li>URIs should be opaque
<ul>
<li>Convey no semantics, cannot infer anything from them</li>
</ul></li>
</ol>

<p>URI templates</p>

<ul>
<li>Straightforward, mixing template and non-template sections</li>
<li>Good idiom for web-based services</li>
<li>Recommendation: useful at high level into entry for
application; allow users to infer URI; great for
self-documentation </li>
<li>... but use hypermedia whereever you can ("leading clients
by the nose")</li>
</ul>

<h2>URI tunnelling</h2>

<p>RPC again!</p>

<ul>
<li>Web tunneling: putting SOAP over HTTP for transport only</li>
<li>Ignoring many of the benfits of REST</li>
<li>But many other systems do this too: POX, ec.</li>
<li>URI tunneling strengths: easy to understand, easy to code,
interoperable since it's just URIs</li>
</ul>

<p>URI tunneling cons</p>

<ul>
<li>Very brittle, tight coupling + no metadata</li>
<li>Map URIs to the function manually</li>
<li>Frequently use GET to do state changes, all params as query params</li>
</ul>

<p>POX pattern</p>

<ul>
<li>Move form data around, pushing with POST between client and
procedure</li>
<li>This is level 0 in the maturity model; only one URI, only
uses POST, etc.</li>
<li>Can use complex data structures (XML, JSON, whatever)</li>
</ul>

<p>POX cons</p>

<ul>
<li>Tightly coupled, no metadata (unless you have WSDL, ha!)</li>
</ul>

<p>Both URI tunneling and POX: web abuse</p>

<ul>
<li>Not cacheable, recoverable; no metadata -- all the stuff
built-in to HTTP is an exercise for the reader</li>
<li>Useful, and easily implementable</li>
</ul>

<h2>More on HTTP</h2>

<p>HTTP verbs</p>

<ul>
<li>GET</li>
<li>PUT for create, or POST to existing</li>
<li>Modify: PUT to existing</li>
<li>DELETE</li>
<li>Metadata: HEAD</li>
<li>Discover manipulations: OPTIONS</li>
</ul>

<p>(These are in the order of being understood by today's
services and/or stacks)</p>

<p>HEAD</p>

<ul>
<li>Allows bandwidth to be saved, headers useful for caching +
performance</li>
</ul>

<p>OPTIONS</p>

<ul>
<li>Easy to spot read-only resources</li>
</ul>

<p>HTTP status codes, explaining a few if them</p>

<ul>
<li>405</li>
<li>409: your view of the resource state is different than
mine, please recompute</li>
<li>412: precondition failed; preconditions must be specified
in headers (??)</li>
<li>413: originally allowed to reject bodies that are too
large; JW implemented as part of circuit-breaker pattern:
returned if server too busy and request couldn't be
processed in SLA</li>
</ul>

<p>Headers</p>

<ul>
<li>Added to assist processing by both the server and client</li>
<li>HTTP defines gobs of these, building blocks for robust
services</li>
<li>Caching headers are common, very useful to understand in
depth -- conditional GET</li>
</ul>

<h2>Application platform</h2>

<p>Using the web -- it's an application platform, not just
transport!</p>

<ul>
<li>CRUD resource lifecycle</li>
<li>Created with POST; read it GET; PUT updates; remove with
DELETE</li>
<li>409 Conflict -- e.g., you try to change the state of the
resource to a disallowed one -- the barista has already
started making your coffee, you cannot cancel it</li>
<li>Similarly, "405 Method not allowed" if DELETE attempted
at the same point (409 could also be allowed)</li>
<li>Idea of the resource having a concrete lifecycle whose
options can change over its life</li>
<li>CRUD good, not great; ignores hypermedia, and encourages
tight coupling through URI templates</li>
</ul>

<p>Application vs resource state</p>

<ul>
<li>Application protocol: rules and constraints that guide
interactions to reach a goal</li>
<li>Application state: where are we in the course of achieving
the goal</li>
<li>Stateless: the service doesn't care about the application
state; the client does; the service cares about resource
state, the client doesn't</li>
</ul>

<p>Semantics</p>

<ul>
<li>Microformats: example of little 's' semantics; not
centrally managed; geared toward simple, well-understood
goal (communicating address, schedule...)</li>
<li>Big 'S' semantics different (Semantic Web, RDF, etc.); not
dealing with here</li>
<li>How do we communicate the application protocol?</li>
<li>Establishing processing context for the protocol</li>
<li>Annotating links to describe semantics of the referenced
resource
<ul>
<li>link rel="service.post" type="..."</li>
<li>link rel="withdraw.cash" ...</li>
<li>Value of the 'rel' attribute is a common understanding
of the application protocol, communicated out-of-band
between the client and server</li>
</ul></li>
</ul>

<p>Hypermedia formats</p>

<ul>
<li>Web contracts expressed in terms of media types and link
relations</li>
<li>Some media types are special, work with the web: we call
these hypermedia</li>
</ul>

<p>Processing model</p>

<ul>
<li>From more general to more specific:
<ol>
<li>Hypermedia controls (links + forms)</li>
<li>Supported operations (uniform methods, headers, status
codes)</li>
<li>Representation formats (possibly including schemas)  </li>
</ol></li>
<li>Atom has this baked in</li>
</ul>

<p>CMW: is there a "history of Atom" published somewhere on the web?
(Tim Bray, Mark Pilgrim?)</p>

<p>Server's "content-type" is centrally important to informing the
  client of the application protocol; how can this message be
  treated? what can the client do with it? what can the client do
  next? Example of XML vs Atom XML.</p>

<p>CMW: explaining difference between "application/xml" and
"application/atom+xml" and client understanding of the
content: snail mail and "envelope" and "mortgage bill" -- the
latter is telling you you need to do something, and has
metadata about how much to pay, where to send your bill...</p>

<p>application/xml not a hypermedia format any more than
text/plain; it assumes nothing about what can be done with the
data</p>

<p>Generally: Headers create processing context for a
transaction. (How does the body get consumed? etc.)</p>

<p>Self-created formats may be semantically rich, but cannot take
advantage of wide adoption</p>

<p>Theirs: application/vnd.restbucks+xml</p>

<ul>
<li>hybrid: use plain XML to convey data, and 'link' elements
to convey application protocol</li>
</ul>

<h2>Restbucks example</h2>

<p>Resource lifetime</p>

<ul>
<li>More than CRUD</li>
<li>Get metadata about resource, and operations</li>
<li>Also tell us about other resources we might want to
interact with</li>
<li>JW example of Amazon.com turning everyone into "moist
robots" by presenting forms to advance through a workflow</li>
</ul>

<p>CMW: Resource is not just data! It's data + pointers to
actions. It's data within the context of a workflow/lifecycle. It
combines "what a thing is" with "what can I do with a thing" (Not
a discovery, just an little epiphany.)  This is useful, but
cannot be something you 'start' with when explaining REST. Useful
tutorial is to lead up to this knowledge, or to possibly start
with it but tease the definition apart and build it up through
demonstration. Even better is to compare it to an application you
might already understand.</p>

<p>Describe contracts with links; links are just state machine
transitions</p>

<ul>
<li>The states + transitions are the application protocol.</li>
<li>Links are APIs into our protocol. The URI in that link is
opaque, entirely controlled by the server. This would be
hugely inappropriate place for URI templates, because
filling in the template is something that must be
coordinated beforehand with shared understanding (e.g.,
what do I fill in for {isbn}, where do I get this data?)</li>
<li>Level 3 of maturity model: representations and formats
identify other resources (remember: resources can be
processes)</li>
</ul>

<p>Structural vs Protocol REST</p>

<ul>
<li>Structural: levels 1 and 2</li>
<li>Protocol: level 3
<ul>
<li>focus on media types as contracts</li>
<li>state transitions in protocol</li>
<li>DAP: Domain Application Protocols</li>
</ul></li>
</ul>

<p>CMW: Would be interesting to model ebXML with HTTP + REST. Is the
hData stuff working on this, or are they only modeling data?</p>

<p>Workflow + MOM</p>

<ul>
<li>Resource state hidden from view</li>
<li>Conversational state is all we know... (?? confusing slide)</li>
</ul>

<p>Hypermedia describes protocols</p>

<ul>
<li>Following links and interacting with resources changes
application state</li>
<li>Hypermedia protocols spans services through URIs</li>
</ul>

<h3>Restbucks example details</h3>

<ul>
<li>One well-known entry point: /order</li>
<li>Other point of coupling: well-known media type</li>
<li>Reponse to order
<ul>
<li>201 Created; includes Location:</li>
<li>has 'dap:link' entries with the protocol;
"You've got work left to do." Content payload and protocol
payload mashed together in the media type.
<ul>
<li>Payment, cancel, latest, update</li>
</ul></li>
</ul></li>
<li>Update the order...
<ul>
<li>Using POST, not PUT. Why? </li>
<li>Limitations of PUT, must send entire resource state
back, even the bits it has no business sending (DAP)</li>
</ul></li>
<li>Stateless: interactions are stateless</li>
<li>Means that race conditions are possible
<ul>
<li>Use If-Modified-Since to make sure; or If-Match and ETag</li>
<li>Reponse will be 412 if you lost the race; but you'll at
least ensure you don't have inconsistent state</li>
<li>Headers can be sent with any of the resource actions;
so our update won't work if the state has changed since
I last knew about it</li>
<li>All this is stuff <strong>YOU HAVE TO WORRY ABOUT ANYWAY</strong> in
your application; HTTP is giving you a standard way to
worry about it</li>
</ul></li>
</ul>

<p>CMW: Interesting side effect of bundling the workflow state
and the data in a resource -- the ETag will change if the
workflow changes. ("Side-effect" wrong term, this is behavior
as intended.)</p>

<p>Use PUT for payments because it's idempotent. You can do it 100
times and get the same effect.</p>

<p>CMW: Interestingly, the media type includes all the data: order,
payment, receipt, etc. Multiple schemas were referenced.</p>

<p>Result of DELETE is the data, but no hypermedia controls;
transaction is done.</p>

<p>CMW: once the DELETE is done, are the related resources
(receipt, etc.) also no longer available? Would it be
appropriate to return an 'archive' link so you can get your
receipt later?</p>

<p>How can the restbucks protocol be improved? (Audience
participation, sticky note exercise.)</p>

<p>Embedding the workflow links in the resource is apparently a
topic of debate in the REST community. There's the option of
using 'Link:' HTTP headers.</p>

<ul>
<li>This latter thing is interesting... how would you indicate
via the ETag that the state -- not just the data has
changed? Or maybe part of the ETag is the last-modified time?</li>
</ul>

<p>What's the solution for integrating ordering and barista-ing
systems?</p>

<ul>
<li>Design in terms of application protocol state machines</li>
<li>Implement in terms of resource lifecycles</li>
<li>Advertise in terms of media types, link relations, and HTTP
idioms </li>
</ul>

<p>Fulfillment DAP: barista accepts from cashier; cashier can
correct the order; barista fulfills (see state diagram)</p>

<ul>
<li>We don't want to model this explicitly on the server,
because we don't want to remember application state on the
service</li>
<li>Model each as a resource</li>
<li>Order hasa Drinks (collection) hasmany Drink
<ul>
<li>State of 'Drinks' resource is partially dependent on
both the 'Order' and the referenced 'Drink' resources</li>
</ul></li>
<li>Barista reviews outstanding orders (GET /orders)
<ul>
<li>returns list of open orders</li>
<li>order has DAP links for 'edit', 'fulfill'</li>
<li>fulfill: puts 'drinks' into 'started' state</li>
<li>start a new drink: 'POST /.../drinks' w/content;
content comes from relevant order; this creates
a new drink resource and returns the 'drinks' resource </li>
</ul></li>
<li>Cashier changes order, removes one item</li>
<li>Barista posts a new drink because two are already made;
uses conditional 'If-Match'; gets 409 because resource has
changed</li>
<li>Barista gets new status of the 'drinks' resource; the
already-made latte now has a state of 'unwanted'; she
issues a DELETE against it</li>
<li>Order state may have changed in the meantime -- for
instance, to pay the bill -- but this does not affect the
'drinks' resource; unless possibly the 'order' resource
was updated with a 'skipped out' status or something...</li>
<li>Check out 'docmented protocol' in the slides for a good
example of what to communicate (entry point, states, links)
<ul>
<li>JW: From RPC background, this looks really 'weird';
it's not machine processable, cannot generate contracts
from it; not so: they're functionally testable (and
this has worked well, he says)</li>
<li>We think of WSDL/WADL as getting us most of the way
there; but it gets you as most of the way into trouble;
it forces you to think of the service <strong>as a remote
service</strong>
<ul>
<li>Also, it's another example of privileging the
'initial start' use case, similar to programming
languages that focus on the 'first-timer'
experience to the detriment of all others</li>
</ul></li>
</ul></li>
</ul>

<p><strong>Scalability</strong></p>

<ul>
<li>Web scalability vs enterprise scalability
<ul>
<li>Latter: focus on scaling up, big iron, cluster to make
things appear to be big iron</li>
<li>Former: scale out, federate, serve the world</li>
</ul></li>
<li>Statelessness
<ul>
<li>In between requests the server knows nothing about you</li>
</ul></li>
<li>Keep interaction protocol simpler; recovery, scalability,
failover simpler</li>
<li>Application vs resource state</li>
<li>Stateless vs stateful interations, set of diagrams in
presentation are useful; "Grandmother anti-pattern" (Q: "I'm
Jim" A: "OK" Q: "What's my balance?" A: "Who are you?")</li>
<li>Horizontal scaling a known quantity; servers fail all the
time</li>
<li>Services share only back-end data </li>
<li>But we can scale vertically by avoiding servers altogether:
the most efficient request is the one that's never serviced
<ul>
<li>JW: YOUR DATABASE IS NOT WEB SCALABLE</li>
<li>...determine as early as possible, and by as far-away a
layer as possible, whether it can already be served    </li>
<li>Short-circuit</li>
</ul></li>
<li>Caching can be very complex, and also serve many complex
needs; conditional gets, multiple layers...</li>
<li>Cache can cache the representation, but check with the
backend as to whether the representation can be released
based on authen/authz, etc.</li>
<li>"Cache-peering" == horizontally scale the cache</li>
<li>"Collapsed forwarding" - take several incoming requests for
a resource, consolidate into one request to the backend,
get the resource, put it in the cache, then serve up the
cached representation</li>
<li>To enable, provide guard clause in request so server can 
easily determine if there's work to do (If-Modified-Since,
If-None-Match, ...)</li>
</ul>

<h2>Security</h2>

<h3>HTTP authentication</h3>

<ul>
<li>Good
<ul>
<li>respect web architecture</li>
<li>stateless design</li>
<li>headers + status codes are well understood</li>
</ul></li>
<li>Bad
<ul>
<li>Basic <strong>must</strong> be used with SSL/TLS</li>
<li>No standard logout</li>
</ul></li>
<li>Other: WSSE
<ul>
<li>Driven from Atom
" Use WS-Security Username Token, mapped to HTTP headers</li>
<li>Does not pass anything sensitive in cleartext</li>
<li>Both sides must know shared secret</li>
</ul></li>
<li>Bad: all auth schemes are susceptible to man-in-the-middle attack
<ul>
<li>This is why transport level security is mandatory when
using HTTP auth of any variety</li>
</ul></li>
</ul>

<h3>SSL/TLS:</h3>

<ul>
<li>Strong server and client auth, integrity</li>
<li>Not broken! (well, not THAT broken -- news from yesterday)</li>
<li>Not cache-friendly</li>
<li>TLS: RFC 2246, RFC 5246
<ul>
<li>Provide secure channel between client and server;
bilaterally identified; confidential</li>
</ul></li>
<li>So why not just use https everywhere?
<ul>
<li>Reduces caching options</li>
<li>Reverse proxies and client-side caching only</li>
<li>Expensive to setup connections (but cheap to maintain)</li>
</ul></li>
<li>Hybrid approach
<ul>
<li>Publish secret data; useless unless you know the key (share
a secret)</li>
<li>Publish data into atom feed, cacheable</li>
<li>Crypto must be strong</li>
<li>Sharing keys can be difficult</li>
</ul></li>
<li>OpenID: decentralized framework for digital identifies
<ul>
<li>Only identity, not trust</li>
<li>Claim that I 'own' a particular URI</li>
<li>Downsides:
<ul>
<li>Trust - your service might not accept my provider</li>
<li>Trusted providers centralize control, but the goal is
decentralization</li>
<li>Federated providers won't interoperate; need hybrid
"signing" model like CAs?</li>
</ul></li>
</ul></li>
<li>OAuth
<ul>
<li>Like Facebook Connect</li>
<li>Be able to authorize a service to act on your behalf</li>
<li>JW: this will become the standard intra-enterprise platform
as well, over WS-Trust etc.</li>
</ul></li>
</ul>

<h3>Responding to hacks</h3>

<ul>
<li>Denial of service
<ul>
<li>Use Content-Length header strictly: no header, adios!</li>
<li>Be strict about processing only the amount of data
specified</li>
<li>Reject requests with 'size' header > n</li>
<li>Swallow OOME so that the bad guys don't know they've won</li>
</ul></li>
<li>Keep secrets secret
<ul>
<li>Don't let clients know that Auth requred -- don't use 401
response, use 404</li>
<li>Don't use easily guessed URIs, use GUIDs instead</li>
</ul></li>
</ul>

<p>CMW respond only with the level of detail that you were provided
(not sure about this?); don't reward probes with data, only with
a 500 error</p>

<ul>
<li>Act defensively
<ul>
<li>validate the content of representations (e.g., latte
quantity of 2147483648)</li>
<li>Exposing domain model as resources means validation</li>
</ul></li>
<li>Don't be gamed
<ul>
<li>GET /order/../../../../etc/passwd</li>
<li>GET /order/../../../../dev/random</li>
<li>JW: "Don't let them double-dot-slash you"</li>
</ul></li>
<li>Less is best
<ul>
<li>Build only what you need; more code == more bugs</li>
<li>Less code, less places for bugs to hide</li>
<li>Building functions that aren't needed</li>
</ul></li>
<li>Defend in depth
<ul>
<li>Firewalls</li>
<li>Only open ports 80 and 443, nothing else</li>
<li>HTTPS != security</li>
<li>Run as least-priviledge</li>
<li>Deploy only config files you need ("good deployment hygiene")</li>
<li>Social engineering is still effective (JW: "I can still
drop a trojan USB key in the foyer and some idiot is going
to plug it into the server")</li>
</ul></li>
</ul>

<h2>Atom + AtomPub</h2>

<p>Application protocol for editing web resources using HTTP
transfer of Atom-formatted representations</p>

<p>AtomPub model</p>

<ul>
<li>Collection has multiple members, each of which is an entry
or link</li>
<li>Collection has multiple categories, workspaces</li>
</ul>

<h3>Example</h3>

<ul>
<li>Order management, Inventory, product management, regional
distribution</li>
<li>Each receives events and does their own decoupled thing    </li>
<li>Ways to implement
<ul>
<li>Point to point: publisher maintains distribution list;
queues reduce temporal coupling</li>
<li>Bus: subscriptions and guaranteed moved to middleware</li>
<li>Consumers pull events: guaranteed delivery delegated
to the puller; no list of subscribers to maintain</li>
</ul></li>
<li>Polling atom feed: URI of the feed is the entry point to
the app</li>
<li>Atom feed represents an event stream; the stream at the known
URI has only a few live working entries; older ones are
archived and available from the 'link rel="prev-archive"';
think of the atom stream as a linked list</li>
<li>Archived feeds are immutable; the idea is that the 'head'
is a snapshot of a period of time</li>
<li>'Content-location' header used in serving the head feed,
indicates the canonical location; it's not just for 302
redirects...</li>
<li>Strive toward idempotency, immutability ~~ functional</li>
<li>Immutable archive supports the 'Event Replay' pattern (see
Fowler) -- catching a crashed client up-to-date and
initializing a branch new client is the <strong>same thing</strong></li>
</ul>

<p>CMW: Would be interesting to put this into Haleakala... you could
even create an atom feed per subscription, or for global use for
a particular transaction type</p>

<p>CMW: If other systems we poll (e.g., nurse call) support ETags,
If-Not-Modified, etc. we should take advantage</p>

<ul>
<li>Atom servers support both ends: publish the events to the
server, then allow clients to poll for updates
<ul>
<li>JW: An example of web middleware; different in nature
from the 'bind everything in a box' middleware</li>
</ul></li>
<li>application/atom+xml - hypermedia
<ul>
<li>Atom Publishing Protocol</li>
<li>Atom Syndication Format</li>
</ul></li>
</ul>

<p>CMW: A lot of this stuff about caching reminds me of Pat
Helland's writings; if you never issue updates (only inserts)
then you can cache the hell out of everything</p>

<ul>
<li>Caching balance: high TTL: efficient use of network; low
TTL, publisher controls freshness</li>
<li>Mark Nottingham: Cache channels -- expose an Atom feed for
caches to poll that determine freshness; a resource is part
of a channel and all resources require refreshing when the
channel does</li>
<li>Atom/AtomPub: trade off massive scalability and ubiquity
for latency; few applications require superhigh latency</li>
</ul>

<hr />

<h2>Questions</h2>

<ul>
<li>Tension with tooling -- the RPC example with PlaceOrder is a
common understanding of using HTTP. But doing it right requires
more human-space stuff (design).</li>
<li>Tension with PUT for create, allowing client to determine
namespace (they addressed this later with the restbucks example,
since they only want a single entry point)</li>
<li>Pattern exists of using 400/500 with header (or content?)
indicating specific error?</li>
<li>Versioning media types: best practices, or just put the version
in the media-type</li>
<li>Pattern of using GET/PUT on subresources? (e.g.,
/order/1234/status)
<ul>
<li>PUT sends whole state of resource, or can send state of
subresource? e.g., PUT /order/1234/items/item[1]/milk</li>
</ul></li>
<li>Does combining the data + workflow for a resource have problems
with different users? That is, you cannot generate a global
ETag for a resource if users with different roles (and
therefore, potentially different workflow actions) access a
resource. For instance, the user may not be able to DELETE an
order, but a restbucks worker might be able to. Or would we
instead advertise all the actions that can possibly be done and
then wait for them to actually perform the action to deny them?</li>
<li>Balance of chattiness vs design correctness; how to know when
to trade-off? (Any good guidelines?)</li>
</ul>

<!-- Tags: qcon; conference; rest; design; http -->

<!--#include virtual="/includes/thread.html" -->
