[%- META
      menu_choice = 'blog'
      page_title  = 'PittJUG: Closures for the Java Programming Language' %]
<p class="post-footer align-right">
  <span class="date">June 20, 2007</span>
</p>
<h1>PittJUG: Closures for the Java Programming Language</h1>

<p>Tonight I went to a PittJUG meeting on Closures. <a
href="http://gafter.blogspot.com/">Neal Gafter</a> from Google gave a
great talk. You could tell he'd done it before and that he really
cared about it, and also that he was barely scratching the surface and
could talk about this for many more hours. (And that he'd love to do
so!)</p>
  
<p>Some notes from the talk:</p>
  
<ul>
   <li>Same talk as @ JavaOne</li>
   <li>been working on this for ~ year</li>
   <li>what are they? why do you want to do this? what does it add?</li>
   <li>MJD quote about laughing at languages without closures</li>
   <li>Goals: 
    <ul>
      <li>Concise "function" literals (currently impl w/anon inner classes)
      <li>Backward compatible (surprise!)
      <li>allow "Control APIs" (extend languages, kinda like foreach loops)
    </ul> 
   </li>
   <li>Control API:
    <ul>
      <li>specific to an API, not generic (if)</li>
      <li>on par with built-in statements</li>
      <li>example: JDK 5 foreach, specific to Collections API</li>
      <li>showed implementation of foreach using anonymous instances; not
   awful, but more verbose and no free variables (as they're called
   here); also ambiguous references to code from calling scope, also
   no throwing of checked exceptions ("Exception Transparency"), also
   ambiguous references to the code that needs to actually return
   something...</li>
      <li>result: inner classes don't cut it for the purpose of expressing
   control statements, impose too many constraints and control
   constructs require that the code they invoke don't change the
   meaning of the control (boils down to: "Incomplete capture of
   lexical context" -- return/break/continue, this, immutable local
   variables)</li>
   <li>example right now: security manager API that will execute your
   code in a specific sandbox</li>
    </ul>
  </li>
<li>Basics of syntax for control statements: pass a block of code
(w/curlies) as the last parameter of a method</li>
</ul>
  
<p>Example: implement locking using imported 'withLock' to guard a
block of code:</p>
  
<pre class="sourceCode">
  declare:   withLock( someLock, someCode ); (not shown, spoken)
  usage:     withLock( getLock ) {
                 fee();
                 fi();
                 fo();
             }  <-- look! no semicolon after the block
</pre>
  
<p>Closure expressions:</p>
    
<pre class="sourceCode">
    { [ parameter declarations ] => [block statements] [expression] }
</pre>
  
<ul>
  <li>object that represents code + lexical context</li>
  <li>may return from enclosing method </li>
  <li>Closure conversion: compiler figures out at compile time what
    type the closure is: if it's a no-arg closure that returns
    nothing, it can be taken as a Runnable
      <ul>
        <li>Can be cases where the closure can match multiple overloaded
       methods, but he only found one case in the JDK where this would
       have happened (in Executor stuff)</li>
      </ul>
  </li>
  <li>Possible for API author to restrict what the closures can do (no
    non-local returns when the calling context doesn't exist later)</li>
  <li>If no 'target type', assumes a 'natural function type'</li>
</ul>
  
<p>Function types:</p>
<pre class="sourceCode">
     { [ parameter declarations ] => return type [ throws ... ] }
</pre>
  
<ul>
   <li>parameters and return values can be generics
   <li>these aren't required, can still use interfaces to declare what
     the function does (better when they're named)</li>
</ul>
        
<pre class="sourceCode">
{ String => int throws NumberFormatException}
  becomes 
java.lang.function.IO<String,NumberFormatException>
                   ^^ I = int, O = Object
  or
package java.lang.function;
public interface IO<A, X extends Exception> {
    int invoke( A arg ) throws X;
        ^^^^^^always named invoke (like proxies)
}
</pre>
  
<ul>
  <li>Function interfaces are generated by javac at runtime, won't find in JDK.</li>
</ul>
  
<p>Finally:</p>
  
<ul>
  <li>Lots of examples (before/after)</li>
  <li>Easy to digest classes of items that this can be used for:</li>
  <ul>
     <li>Locking</li>
     <li>More iterations (for eachEntry( Key, Value : map ))</li>
     <li>Closeables (streams, DB connections)</li>
  </ul></li>
  <li>Others:
  <ul>
     <li>Fork/Join Concurrency (Doug Lea, exists now but no good way to express)</li>
     <li>Higher order utilities</li>
     <li>AOP? (register advice and cutpoints, then match them up at runtime)</li>
     <li>Continuations? (bounded continuations...)</li>
     <li>Multiple dispatch? </li>
  </ul></li>
</ul>               
  
<p>Homepage of closures proposal: 
  <a href="http://www.javac.info/">http://www.javac.info/</a></p>


<!-- Tags: java; programming; usergroup -->
