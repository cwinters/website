[%- META
      menu_choice = 'blog'
      page_title  = 'Small teams and big jobs' %]
<p class="post-footer align-right">
  <span class="date">November 25, 2007</span>
</p>
<h1>Small teams and big jobs</h1>

<p>Reg Braithwaite has a typically interesting post, <a
href="http://weblog.raganwald.com/2007/11/what-if-powerful-languages-and-idioms.html">What if powerful languages and idioms only work for small teams?</a>. 
As usual I think things are more complex than most of the posters.</p>

<p>First, most of them completely disregard timeframe. Sure, as
Carmack said, "a team of 3 focused and creative people can accomplish
almost anything" -- given sufficient time. But time is the knob that
many (most?) projects have little control over. Everybody has
competitors, and everything needs to get out yesterday.</p>

<p>Second, most of the comments regard developers only. Does "small
team" include QA? People to gather requirements? People to write
documentation for users, or even other developers? Or do the
developers do those too? (And if they do, see the first item.)</p>

<p>Third, I think there's a huge distinction between creating
something and maintaining/improving it. I agree with Bob that it's
possible to <b>create</b> complex software.  But what happens when it
gets in front of customers? And then when you can no longer count the
number of customers on your fingers and toes?  And assuming only half
of them have potential ideas as to bugs and improvements, who's going
to do all that <b>and</b> develop new features to keep up with the
Jonses, or those left out from the last version due to time
constraints?</p>

<p>Fourth, the examples brought up during the comments are all tools
-- Linux, Delphi, even Quattro Pro. They're generic tools built
without regard for any specific business logic. But I'd venture a
guess that most developers don't work on such systems. They have to
deal with automating processes that have been accreted for years on
paper and informally in the brains of the workers. And even then they
have to communicate with systems and coordinate not only protocols
(which is what tools do) but content, even in the face of stupid
implementations.</p>

<p>And doing all that for non-trivial businesses, with a small team,
no matter what language, is a tough job. (Not even mentioning figuring
out what it is you're supposed to build.) In a short amount of time?
Approaching impossible.</p>

<!-- Tags: collaboration; programming; team -->
