[%- META
      menu_choice = 'blog'
      page_title  = 'Object/relational fun' %]
<p class="post-footer align-right">
  <span class="date">September 23, 2002</span>
</p>
<h1>Object/relational fun</h1>

Lots of recent posts on O/R frameworks from
<a href="http://radio.weblogs.com/0107789/2002/09/23.html">Mike</a>,
Joe (<a href="http://radio.weblogs.com/0108103/2002/09/22.html#a65">here</a> and
<a href="http://radio.weblogs.com/0108103/2002/09/23.html#a68">here</a>),
<a href="http://roller.anthonyeden.com/page/jduska/20020923">Joe</a>,
<a href="http://roller.anthonyeden.com/page/aeden/20020923">Anthony</a>, <a href="http://radio.weblogs.com/0100190/2002/09/23.html">Charles</a>, 
<a href="http://radio.weblogs.com/0109827/2002/09/21.html#a1002">Brett</a> and
<a href="http://radio.weblogs.com/0107791/2002/09/20.html#a172">Gerhard</a>,
to name a few. (And just to be a sneak, I mentioned something about this
<a href="/News/show/?news_id=116">a couple weeks ago</a>.)

<p>One note: I may come at this from a different angle than some
people -- I'm the primary author of <a
href="http://search.cpan.org/author/CWINTERS/SPOPS-0.70/">SPOPS</a>,
an object persistence framework in Perl that can use DBI datasources
(like JDBC with less metadata but faster), GDBM keyed access and
LDAP. I also work almost entirely on heterogeneous systems where data
are accessed by multiple languages and multiple systems.</p>

<p>I've never quite understood why it's a good thing to be able to
pull in an entire object graph when you retrieve an object. It smacks
of peekaboo logic: something is happening behind the scenes, and it's
magical when it works, but have fun debugging it if something goes
awry. Sure, it's fun to program a system to traverse graphs and all
that CS stuff, but how often do you really need all that data? And
what's wrong with simply doing:</p>

<pre>
    Customer cust = db.fetch( customerID );
    List custOrders = cust.getOrders();
</pre>

<p>The code is simple, straightforward, and easy to understand. Some
argue that it's useful to do something like:</p>

<pre>
    for ( Iterator it = custOrders.iterator(); it.hasNext(); ) {
        Order order = (Order)it.next();
        if ( order.meetsSomeCrazyCondition() ) {
            order.setSomeValue();
        }
    }
    cust.save();  // saves all modified orders too!
</pre>

<p>But this is just more peekaboo logic: why not just save each order
as you go? If you're worried about potential multiple database
accesses, just hit up my hero Martin Fowler for some <a
href="http://www.martinfowler.com/isa/unitOfWork.html">Unit of
Work</a> action so they're all submitted at once.</p>

<p>Querying is another issue that Mike brings up. I hate to sound like
a curmudgeon, but what's wrong with SQL? Everyone knows it, it's
simple to work with and, for most tasks, it's portable from database to
database. It's ugly scattered around your system, but then any sort of
query would be ugly scattered around your system. Centralizing,
frequently in some sort of configuration file, is a good thing.</p>

<p>This brings us to the next point. I agree wholeheartedly with Mike
on this: being able to change a configuration file and then generate
your persistent classes is amazingly powerful -- talk about
flexibility! (There's another entry just about this around the
corner...)</p>

<p>I also have little patience for frameworks that  don't let me retrofit them to an existing schema, or that require me to change my database schema to accommodate them. For instance, I can't believe how dumb the Entity Bean frameork is to not work <b>out of the box</b>  with some sort of framework that supports existing sequences or identity fields for autogenerated primary keys. It's not like it's a hard problem!</p>

<!-- Tags: programming -->
