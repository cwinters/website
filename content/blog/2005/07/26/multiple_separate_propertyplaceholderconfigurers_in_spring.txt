[%- META
      menu_choice = 'blog'
      page_title  = 'Multiple, separate PropertyPlaceholderConfigurers in Spring' %]
<p class="post-footer align-right">
  <span class="date">July 26, 2005</span>
</p>
<h1>Multiple, separate PropertyPlaceholderConfigurers in Spring</h1>

<p><a href="http://forum.springframework.org/viewtopic.php?t=3667">several PropertyPlaceholderConfigurer instances in a AppCtx?</a> - I'm building a custom lightweight application server at work with Spring as its core. Any number of applications can be deployed to it; they're discovered at runtime so deployment is a file-copy. Each application has its own Spring context and settings and to ensure we have writable configuration in an easy-to-read format some of the bean settings are brought in at runtime from properties files. Spring provides the <tt>PropertyPlaceholderConfigurer</tt> for this, so that's easy glue. (Dion had a <a href="http://www.almaer.com/blog/archives/000449.html">good post about this</a> almost a year ago.)</p>

<p>However, if you want to reference multiple configurers that don't know about each other you'll run into a problem. At first it will appear that you can only define one configurer because some settings won't be replaced properly, but that's a red herring. What happens is that behind the scenes Spring associates each configurer with parsing rules so it knows which configurer is supposed to replace which placeholders. Therefore you've got to provide some disambiguation to this parser. Fortunately it's easy:</p>
  
<pre class="sourceCode">
    &lt;bean id="appASettings"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        &lt;property name="location" value="appA_settings.properties" />
        &lt;property name="placeholderPrefix" value="<b>$A{</b>" />
    &lt;/bean>
  
    &lt;bean id="appADataSource" 
        class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        &lt;property name="driverClassName" value="<b>$A{</b>db.driver}" />
        &lt;property name="url"             value="<b>$A{</b>db.url}" />
        ...
</pre>
  
<p>As long as every application has its own prefix its settings will never get stomped on by any other and you can presumably add as many configurers as you need. What's most interesting about this is that the complexity behind this is <b>only revealed if you need it</b>. IMO most open-source projects -- and, to a lesser extent, all software -- have a hard time with this principle, burdening you with lots of configuration to do even simple things.</p>


<!-- Tags: config; java; spring -->
